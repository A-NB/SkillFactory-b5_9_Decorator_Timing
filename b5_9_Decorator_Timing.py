# Импортируем модуль для работы со временем в Python
import time

# Создаём описание класса
class TimeThis:

    # Конструктор класса
    def __init__(self, num_runs = 1): # Количество прогонов по умолчанию = 1. Его можно изменить при вызове, указав в качестве аргумента num_runs = нужное_число
        self.num_runs = num_runs

    # При использовании TimeThis в качестве контекстного менеджера (в конструкции with TimeThis()) вначале автоматически вызывается метод класса __enter__
    def __enter__(self):
        self.t_begin = time.time()
        return self

    # При использовании TimeThis в качестве контекстного менеджера (в конструкции with TimeThis()) при завершении его работы автоматически вызывается метод класса __exit__    
    def __exit__(self, *args):
        t_end = time.time()
        avg_time = (t_end-self.t_begin) / self.num_runs
        print(f"\nПри использовании объекта класса в качестве контекстного менеджера:\nКоличество циклов: {self.num_runs}, среднее время выполнения составило: {avg_time} секунд")

    # При использовании TimeThis в качестве декоратора и последующем вызове декорируемой функции автоматически вызывается метод класса __call__
    def __call__(self, func, *args, **kwargs):

        def time_counter():
            avg_time = 0
            for i in range(self.num_runs):
                t_begin = time.time()
                func()
                t_end = time.time()
                avg_time += (t_end-t_begin)
            avg_time /= self.num_runs
            print(f"\nПри использовании объекта класса в качестве декоратора:\nКоличество циклов: {self.num_runs}, среднее время выполнения составило: {avg_time} секунд")
        return time_counter

""" Пример использования объекта класса в качестве контекстного менеджера:"""
def f1():
    for j in range(1000000):
        pass

n = 10 # Задаём необходимое количество запусков для использования с контекстным менеджером
# Используем класс TimeThis как контекстный менеджер   
with TimeThis(n):
    for i in range(n):
        f1()

""" Пример использования объекта класса в качестве декоратора:"""    
# Используем класс TimeThis в качестве декоратора  
@TimeThis(10) # Передаём в аргументе num_runs необходимое количество запусков
# Декорируемая функция
def f2():
    for j in range(1000000):
        pass
f2()


# Пример вывода в консоль:
# 
# При использовании объекта класса в качестве контекстного менеджера:
# Количество циклов: 10, среднее время выполнения составило: 0.0812899112701416 секунд

# При использовании объекта класса в качестве декоратора:
# Количество циклов: 10, среднее время выполнения составило: 0.0839301586151123 секунд